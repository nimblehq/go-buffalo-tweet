package actions

import (
	"github.com/bufftwitt/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Tweet)
// DB Table: Plural (tweets)
// Resource: Plural (Tweets)
// Path: Plural (/tweets)
// View Template Folder: Plural (/templates/tweets/)

// TweetsResource is the resource for the Tweet model
type TweetsResource struct {
	buffalo.Resource
}

func (v TweetsResource) scope(c buffalo.Context) *pop.Query {
    tx, _ := c.Value("tx").(*pop.Connection)
    currentUserId := c.Session().Get("current_user_id")
    return tx.Where("user_id = ?", currentUserId)
}

// List gets all Tweets. This function is mapped to the path
// GET /tweets
func (v TweetsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	_, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	tweets := &models.Tweets{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := v.scope(c).PaginateFromParams(c.Params())

	// Retrieve all Tweets from the DB
	if err := q.All(tweets); err != nil {
		return errors.WithStack(err)
	}

	// Make Tweets available inside the html template
	c.Set("tweets", tweets)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("tweets/index.html"))
}

// Show gets the data for one Tweet. This function is mapped to
// the path GET /tweets/{tweet_id}
func (v TweetsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Tweet
	tweet := &models.Tweet{}

	// To find the Tweet the parameter tweet_id is used.
	if err := tx.Find(tweet, c.Param("tweet_id")); err != nil {
		return c.Error(404, err)
	}

	// Make tweet available inside the html template
	c.Set("tweet", tweet)

	return c.Render(200, r.HTML("tweets/show.html"))
}

// New renders the form for creating a new Tweet.
// This function is mapped to the path GET /tweets/new
func (v TweetsResource) New(c buffalo.Context) error {
	// Make tweet available inside the html template
	c.Set("tweet", &models.Tweet{})

	return c.Render(200, r.HTML("tweets/new.html"))
}

// Create adds a Tweet to the DB. This function is mapped to the
// path POST /tweets
func (v TweetsResource) Create(c buffalo.Context) error {
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	currentUser := c.Value("current_user").(*models.User)

	// Allocate an empty Tweet
	tweet := &models.Tweet{ }

	// Bind tweet to the html form elements
	if err := c.Bind(tweet); err != nil {
		return errors.WithStack(err)
	}

	// Don't call in Tweet creation, it should be behind the Bind
	tweet.UserID = currentUser.ID

	// Get the DB connection from the context


	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(tweet)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make tweet available inside the html template
		c.Set("tweet", tweet)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("tweets/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Tweet was created successfully")

	// and redirect to the tweets index page
	return c.Redirect(302, "/tweets/%s", tweet.ID)
}

// Edit renders a edit form for a Tweet. This function is
// mapped to the path GET /tweets/{tweet_id}/edit
func (v TweetsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Tweet
	tweet := &models.Tweet{}

	if err := tx.Find(tweet, c.Param("tweet_id")); err != nil {
		return c.Error(404, err)
	}

	// Make tweet available inside the html template
	c.Set("tweet", tweet)
	return c.Render(200, r.HTML("tweets/edit.html"))
}

// Update changes a Tweet in the DB. This function is mapped to
// the path PUT /tweets/{tweet_id}
func (v TweetsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Tweet
	tweet := &models.Tweet{}

	if err := tx.Find(tweet, c.Param("tweet_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Tweet to the html form elements
	if err := c.Bind(tweet); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(tweet)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make tweet available inside the html template
		c.Set("tweet", tweet)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("tweets/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Tweet was updated successfully")

	// and redirect to the tweets index page
	return c.Redirect(302, "/tweets/%s", tweet.ID)
}

// Destroy deletes a Tweet from the DB. This function is mapped
// to the path DELETE /tweets/{tweet_id}
func (v TweetsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Tweet
	tweet := &models.Tweet{}

	// To find the Tweet the parameter tweet_id is used.
	if err := tx.Find(tweet, c.Param("tweet_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(tweet); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Tweet was destroyed successfully")

	// Redirect to the tweets index page
	return c.Redirect(302, "/tweets")
}
