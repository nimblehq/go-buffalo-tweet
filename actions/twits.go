package actions

import (
    "github.com/bufftwitt/models"
    "github.com/gobuffalo/buffalo"
    "github.com/markbates/pop"
    "github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Twit)
// DB Table: Plural (twits)
// Resource: Plural (Twits)
// Path: Plural (/twits)
// View Template Folder: Plural (/templates/twits/)

// TwitsResource is the resource for the Twit model
type TwitsResource struct {
    buffalo.Resource
}

// List gets all Twits. This function is mapped to the path
// GET /twits
func (v TwitsResource) List(c buffalo.Context) error {
    // Get the DB connection from the context
    tx, ok := c.Value("tx").(*pop.Connection)
    if !ok {
        return errors.WithStack(errors.New("no transaction found"))
    }

    twits := &models.Twits{}

    // Paginate results. Params "page" and "per_page" control pagination.
    // Default values are "page=1" and "per_page=20".
    q := tx.PaginateFromParams(c.Params())

    // Retrieve all Twits from the DB
    if err := q.All(twits); err != nil {
        return errors.WithStack(err)
    }

    // Make Twits available inside the html template
    c.Set("twits", twits)

    // Add the paginator to the context so it can be used in the template.
    c.Set("pagination", q.Paginator)

    return c.Render(200, r.HTML("twits/index.html"))
}

// Show gets the data for one Twit. This function is mapped to
// the path GET /twits/{twit_id}
func (v TwitsResource) Show(c buffalo.Context) error {
    // Get the DB connection from the context
    tx, ok := c.Value("tx").(*pop.Connection)
    if !ok {
        return errors.WithStack(errors.New("no transaction found"))
    }

    // Allocate an empty Twit
    twit := &models.Twit{}

    // To find the Twit the parameter twit_id is used.
    if err := tx.Find(twit, c.Param("twit_id")); err != nil {
        return c.Error(404, err)
    }

    // Make twit available inside the html template
    c.Set("twit", twit)

    return c.Render(200, r.HTML("twits/show.html"))
}

// New renders the form for creating a new Twit.
// This function is mapped to the path GET /twits/new
func (v TwitsResource) New(c buffalo.Context) error {
    // Make twit available inside the html template
    c.Set("twit", &models.Twit{})

    return c.Render(200, r.HTML("twits/new.html"))
}

// Create adds a Twit to the DB. This function is mapped to the
// path POST /twits
func (v TwitsResource) Create(c buffalo.Context) error {
    // Get the DB connection from the context
    tx, ok := c.Value("tx").(*pop.Connection)
    if !ok {
        return errors.WithStack(errors.New("no transaction found"))
    }

    user := c.Value("current_user").(*models.User)

    // Allocate an empty Twit
    twit := &models.Twit{
        UserID: user.ID,
    }


    // Bind twit to the html form elements
    if err := c.Bind(twit); err != nil {
        return errors.WithStack(err)
    }


    // Validate the data from the html form
    verrs, err := tx.ValidateAndCreate(twit)
    if err != nil {
        return errors.WithStack(err)
    }

    if verrs.HasAny() {
        // Make twit available inside the html template
        c.Set("twit", twit)

        // Make the errors available inside the html template
        c.Set("errors", verrs)

        // Render again the new.html template that the user can
        // correct the input.
        return c.Render(422, r.HTML("twits/new.html"))
    }

    // If there are no errors set a success message
    c.Flash().Add("success", "Twit was created successfully")

    // and redirect to the twits index page
    return c.Redirect(302, "/twits/%s", twit.ID)
}

// Edit renders a edit form for a Twit. This function is
// mapped to the path GET /twits/{twit_id}/edit
func (v TwitsResource) Edit(c buffalo.Context) error {
    // Get the DB connection from the context
    tx, ok := c.Value("tx").(*pop.Connection)
    if !ok {
        return errors.WithStack(errors.New("no transaction found"))
    }

    // Allocate an empty Twit
    twit := &models.Twit{}

    if err := tx.Find(twit, c.Param("twit_id")); err != nil {
        return c.Error(404, err)
    }

    // Make twit available inside the html template
    c.Set("twit", twit)
    return c.Render(200, r.HTML("twits/edit.html"))
}

// Update changes a Twit in the DB. This function is mapped to
// the path PUT /twits/{twit_id}
func (v TwitsResource) Update(c buffalo.Context) error {
    // Get the DB connection from the context
    tx, ok := c.Value("tx").(*pop.Connection)
    if !ok {
        return errors.WithStack(errors.New("no transaction found"))
    }

    // Allocate an empty Twit
    twit := &models.Twit{}

    if err := tx.Find(twit, c.Param("twit_id")); err != nil {
        return c.Error(404, err)
    }

    // Bind Twit to the html form elements
    if err := c.Bind(twit); err != nil {
        return errors.WithStack(err)
    }

    verrs, err := tx.ValidateAndUpdate(twit)
    if err != nil {
        return errors.WithStack(err)
    }

    if verrs.HasAny() {
        // Make twit available inside the html template
        c.Set("twit", twit)

        // Make the errors available inside the html template
        c.Set("errors", verrs)

        // Render again the edit.html template that the user can
        // correct the input.
        return c.Render(422, r.HTML("twits/edit.html"))
    }

    // If there are no errors set a success message
    c.Flash().Add("success", "Twit was updated successfully")

    // and redirect to the twits index page
    return c.Redirect(302, "/twits/%s", twit.ID)
}

// Destroy deletes a Twit from the DB. This function is mapped
// to the path DELETE /twits/{twit_id}
func (v TwitsResource) Destroy(c buffalo.Context) error {
    // Get the DB connection from the context
    tx, ok := c.Value("tx").(*pop.Connection)
    if !ok {
        return errors.WithStack(errors.New("no transaction found"))
    }

    // Allocate an empty Twit
    twit := &models.Twit{}

    // To find the Twit the parameter twit_id is used.
    if err := tx.Find(twit, c.Param("twit_id")); err != nil {
        return c.Error(404, err)
    }

    if err := tx.Destroy(twit); err != nil {
        return errors.WithStack(err)
    }

    // If there are no errors set a flash message
    c.Flash().Add("success", "Twit was destroyed successfully")

    // Redirect to the twits index page
    return c.Redirect(302, "/twits")
}
